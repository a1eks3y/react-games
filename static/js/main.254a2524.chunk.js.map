{"version":3,"sources":["SnakeCell/SnakeCell.jsx","App.js","index.js"],"names":["SnakeCell","x","y","className","style","marginTop","marginLeft","App","useState","score","setScore","GameOver","setGameOver","pause","setPause","JSON","stringify","snake","setSnake","Math","floor","random","apple","setApple","mainDirection","setMainDirection","direction","changeDirection","e","console","log","snakeArr","parse","code","length","useEffect","a","document","addEventListener","Promise","setTimeout","removeEventListener","directNow","lastElem","push","appleAte","crash","forEach","el","i","arr","shift","onClick","height","color","alignContent","display","justifyContent","fontSize","map","position","right","top","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.254a2524.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SnakeCell.css'\r\n\r\nconst SnakeCell = ({x, y}) => {\r\n    return (\r\n        <div className='snakeCell' style={{marginTop: (y-1)*20 + 'px', marginLeft: (x-1)*20 + 'px'}}>\r\n            <div className='CellBG'/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SnakeCell;","import React, {useEffect, useState} from 'react';\nimport './App.css'\nimport SnakeCell from \"./SnakeCell/SnakeCell\";\n\nconst App = () => { //37x23 [[1, 2] [3, 1]\n    const [score, setScore] = useState(0)\n    const [GameOver, setGameOver] = useState(true)\n    const [pause, setPause] = useState(true)\n    const [snake, setSnake] = useState(JSON.stringify([[1, 12], [2, 12], [3, 12]])) //[x,y]\n    const [apple, setApple] = useState(JSON.stringify([Math.floor(Math.random() * 33 + 4), Math.floor(Math.random() * 22 + 1)]))\n    const [mainDirection, setMainDirection] = useState('Right')\n    let direction = mainDirection\n    const changeDirection = (e) => {\n        console.log(e)\n        let snakeArr = JSON.parse(snake)\n        // eslint-disable-next-line default-case\n        switch (e.code) {\n            case 'KeyW':\n                if (snakeArr[snakeArr.length - 1][1] <= snakeArr[snakeArr.length - 2][1]) direction = 'Up'\n                break;\n            case 'KeyA':\n                if (snakeArr[snakeArr.length - 1][0] <= snakeArr[snakeArr.length - 2][0]) direction = 'Left'\n                break;\n            case 'KeyD':\n                if (snakeArr[snakeArr.length - 2][0] <= snakeArr[snakeArr.length - 1][0]) direction = 'Right'\n                break;\n            case 'KeyS':\n                if (snakeArr[snakeArr.length - 2][1] <= snakeArr[snakeArr.length - 1][1]) direction = 'Down'\n                break;\n        }\n        console.log(direction)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(async () => {\n        !pause && !GameOver && document.addEventListener('keydown', changeDirection)\n        !pause && !GameOver && await new Promise(() => setTimeout(() => {\n            document.removeEventListener('keydown', changeDirection)\n            let directNow = direction || mainDirection\n            let snakeArr = JSON.parse(snake)\n            let lastElem = snakeArr[snakeArr.length - 1]\n            // eslint-disable-next-line default-case\n            switch (directNow) {\n                case 'Up':\n                    snakeArr.push([lastElem[0], lastElem[1] - 1])\n                    break\n                case 'Left':\n                    snakeArr.push([lastElem[0] - 1, lastElem[1]])\n                    break\n                case 'Right':\n                    snakeArr.push([lastElem[0] + 1, lastElem[1]])\n                    break\n                case 'Down':\n                    snakeArr.push([lastElem[0], lastElem[1] + 1])\n                    break\n            }\n            let appleAte = false\n            let crash = false\n            snakeArr.forEach((el, i, arr) => {\n                if (el[0] === JSON.parse(apple)[0] && el[1] === JSON.parse(apple)[1]) appleAte = true\n                if (el[0] === arr[arr.length - 1][0] && el[1] === arr[arr.length - 1][1] && i !== arr.length - 1)\n                    crash = true\n            })\n            debugger\n            console.log(snakeArr)\n            if (snakeArr[snakeArr.length - 1][0] < 1\n                || snakeArr[snakeArr.length - 1][1] < 1\n                || snakeArr[snakeArr.length - 1][0] > 37\n                || snakeArr[snakeArr.length - 1][1] > 23)\n                crash = true\n            !appleAte && snakeArr.shift()\n            appleAte && setScore(score + 1)\n            if (crash) {\n                setGameOver(true)\n                setPause(true)\n            }\n            appleAte && setApple(JSON.stringify([Math.floor(Math.random() * 36 + 1), Math.floor(Math.random() * 22 + 1)]))\n            snakeArr = JSON.stringify(snakeArr)\n            setMainDirection(direction)\n            setSnake(snakeArr)\n        }, 75))\n    }, [snake, pause, GameOver])\n\n\n    return (\n        <>\n            <div className='App' onClick={() => {\n                if (GameOver) {\n                    setMainDirection('Right')\n                    setGameOver(false)\n                    setSnake(JSON.stringify([[1, 12], [2, 12], [3, 12]]))\n                    setApple(JSON.stringify([Math.floor(Math.random() * 33 + 4), Math.floor(Math.random() * 22 + 1)]))\n                } else {\n                    pause && setPause(false)\n                }\n\n            }}>\n                {\n\n                }\n                {\n                    pause && !GameOver\n                        ?\n                        <div style={{height: '100%', color: 'white'}}>Кликните, чтобы начать</div>\n                        :\n                        GameOver ? <div className='GameOver' style={{\n                                alignContent: 'center',\n                                display: 'flex',\n                                justifyContent: 'center',\n                                fontSize: '195px',\n                                color: 'rgb(152,0,2)'\n                            }}>GameOver</div>\n                            :\n                            <>\n                                {JSON.parse(snake).map(el =>\n                                    <SnakeCell key={el} x={el[0]} y={el[1]}/>\n                                )}\n                                <div className='apple' style={{\n                                    marginTop: (JSON.parse(apple)[1] - 1) * 20 + 'px',\n                                    marginLeft: (JSON.parse(apple)[0] - 1) * 20 + 'px'\n                                }}>\n                                    <div className='bg-apple'/>\n                                </div>\n                            </>\n                }\n\n            </div>\n            <div style={{position: 'absolute', fontSize: '40px', right: 40, top: 'calc(100vh / 2)'}}>\n                {score}\n            </div>\n        </>\n    )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}